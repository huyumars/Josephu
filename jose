#include <iostream>
using namespace std;
#include <iostream>
using namespace std;
typedef int Node_entry;
struct Node {
	Node_entry entry;
	Node *next;
	Node();
	Node(Node_entry item, Node *add_on = NULL);
};
Node::Node() {
	next = NULL;
}
Node::Node(Node_entry item, Node*add_on)
{
	entry = item;
	next = add_on;
}
class CirList {
public:
	CirList();
	void create_CirList(int n);
	void add_from_head(Node_entry item);//头插
	void add_from_tail(Node_entry item);//尾插
	void print();
	void Joseph(int m);
	Node* get(Node* node, int m);
	int length();
	Node* get_Head();
	void list_clear();
private:
	Node* head;
	Node* tail;
	int count;
};
CirList::CirList() {
	head = tail = NULL;
	count = 0;
}
void CirList::create_CirList(int n) {
	Node *s = head;
	head = new Node;
	head->entry = 1;
	s->entry = 1;
	for (int i = 2;i <=n;i++) {
		Node*w = new Node;
		w->entry = i;
		s->next = w;
		s = w;
	}
	tail = new Node;
	tail->entry = n;
	tail->next = head;
	count = n;
}
void CirList::add_from_head(Node_entry item) {
	Node *s = head;
	head = new Node;
	head->entry = 1;
	for (int i = 2;i <= item;i++) {
		Node*w = new Node;
		w->entry = i;
		s->next = w;
		s = w;
	}
	tail = new Node;
	tail->entry = item;
	s->next = tail;
	tail->next = head;
	count = item;
}
void CirList::add_from_tail(Node_entry item) {
	Node *s = tail;
	tail = new Node;
	tail->entry = item;
	for (int i = item - 1;i > 1;i--) {
		Node*w = new Node;
		w->entry = i;
		w->next = s;
		s = w;
	}
	head = new Node;
	head->entry = 1;
	head->next = s;
	tail->next = head;
	count = item;
}
void CirList::print() {
	Node*p;
	for (p = head;p != tail;p++) {
		cout << p->entry;
	}
}
void CirList::Joseph(int m) {
	Node*p = head;Node*q;
	int j = 1;//计数器
	while (j != m-1) {
		j++;
		p=p->next;
	}
	q = p;
	p = p->next;
	if (p == head) {
		head = p->next;
		tail->next = head;
		delete p;
	}
	else if (p == tail) {
		q->next = head;
		tail = q;
		delete p;
	}
	else {
		q->next = p->next;
		delete p;
	}
	count--;

}
Node* CirList::get(Node* node, int m) {
	Node*p;
	p = node;
	for (int i = 0;i < m - 1;i++) {
		p = p->next;
	}
	return p;
}
int CirList::length() {
	return count;
}
Node* CirList::get_Head() {
	return head;
}
void CirList::list_clear() {
	head = tail = NULL;
	count = 0;
}
int main() {
	cout << "Please enter m,n:" << endl;
	int m, n;
	cin >> m >> n;
	CirList cirlist;
	cirlist.create_CirList(n);
	while (cirlist.length())
		cirlist.Joseph(m);
	cirlist.print();
	return 0;
}
